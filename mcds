#!/bin/bash
#Copyright (C) 2015 Michael Ruigrok - protected under Australian and International Copyright law
#Michael Ruigrok can be found at http://www.github.com/michaelruigrok/
#or at ruigrok.michael@gmail.com
#Licence found within LICENSE
############################################


#envars
README=./README.md
DIR=
VERSION=
OLD_VERSION=

#to be determined at runtime (probably don't change it):
#executed path (this script), with dereferenced symlink
  EPATH=$(readlink $0)
[ -z $EPATH ] && EPATH=$0

error () {
 (>&2 echo $@)
 exit 1
}

#takes the property $1 and updates it to value $2 in the server properties
update_property () {
  echo "updating field $1"
  sed -i -e "s/^$1=.*/$1=$2/" "$DIR/server.properties"
}

#takes the envar $1 and updates it to value $2 from within this file
update_envar () {
  echo "updating envar '$1'"
  sed -i -e "s|^$1=.*|$1=$2|" "$EPATH"
}

#updates field $1 to be $2 in file $3
update_field () {
  sed -i -e "s|^$1=.*|$1=$2|" "$3"
}

#prints 'true' and if truthy, and 'false' if falsey, throw error & exit otherwise
get_bit () {
  case "$1" in
    true|1|on|set|yes)
      echo "true"
      ;;
    false|0|off|clear|no)
      echo "false"
      ;;
    *)
      error "Option $1 is not a binary value"
  esac
}

#updates the property $1 to match the binary value $2 in server properties
set_bit () {
  bit="$(get_bit)"
  case "$2" in
    true|false)
      update_property "$1" "$bit"
      ;;
  esac
}

#updates the property $1 to match the number value $2 in server properties
set_num () {
  regex='^[0-9]+$'
  if [[ $2 =~ $regex ]]; then
    update_property $1 $2
  else
    error "Option $1 is not a number value"
  fi
}

get_valid_directory () {
  echo $1
  dir=$(eval echo "${1}")
  if ! [[ -d $dir ]]; then
    error "Invalid directory '$1'"
  fi
  echo $dir
}

#retrieve the latest server version from mojang servers
get_latest_version () {
  link="$(curl https://launchermeta.mojang.com/mc/game/version_manifest.json 2> /dev/null | grep 'latest')"
  #echo "$(echo "$link" | cut -d '}' -f 1 | sed 's%.*\(s3.*\.jar\)">.*%\1%')"
  echo "$link" | cut -d '"' -f 10
}

#apply the given version number as the current number
update_server_version () {
  update_envar OLD_VERSION "$VERSION"
  update_envar VERSION "$1"
  OLD_VERSION="$VERSION"
  VERSION="$1"
}

get_download_link() {
  link="$(curl https://minecraft.net/en-us/download/server 2> /dev/null | grep 'Download <a href=')"
  echo "$(echo "$link" | sed 's%.*\(https.*\.jar\)">.*%\1%')"
}

#downloads the latest server update, if available
#optional first argument specifies a version number other than the latest version
download_server () {
  [ ! -z $1 ] && version=$1 || version=$(get_latest_version)


  if [ "$version" = "$VERSION" ]; then
    echo "Version is current."
    return 1
  fi

  link=$(get_download_link)
  echo "link is $link"

  echo "Downloading new server..."
  if curl "$link" > $DIR/new_server.jar; then 
    #if [ ! -e $DIR/minecraft_server.jar ]; then
    if [ -f minecraft_server.jar ]; then
      echo "Downloaded new file, now making backup and replacing server jar"
      mv minecraft_server.jar old_server.jar || return 2
    fi
    mv new_server.jar minecraft_server.jar
    update_server_version $version
    return 0
  fi
  return 2
}

echo_help () {
  echo "This is mcds, the simple minecraft server launcher"
}

#main

if [ "$1" = "--help" ]; then
  echo
  sed -n -e '/Options/,$p' $README
  exit

elif [ "$1" = "--args" ]; then
  echo
  echo "The last option name (Not the all-caps argument) corresponds to property name"
  echo "As it is in the server.properties file:"
  echo
  awk "/Script Options/,0{ if (/^#|^\s*-/) {print}}" $README
  exit

elif [[ -z "$DIR" ]]; then
  echo "Please enter the directory the minecraft server lives at:"
  echo "(Leave blank if it's the same place this script is at (following symlinks))"
  read directory
  [ -z "$directory" ] && directory=$(dirname "$EPATH")
  directory=$(get_valid_directory "$directory")
  DIR=$directory
  update_envar DIR $directory

elif [ "$1" = "--reset" ]; then
  echo
  echo "this will delete any knowledge of data in the server directory, but will"
  echo "create a backup of this script inside of it just in case. Proceed (y/N)?"
  read reset
  [ $reset != 'y' ] && echo "Not resetting. Bye now!" && exit
  cp "$EPATH" $DIR/backup.mcds
  echo "Backup at backup.mcds"
  update_envar DIR
  update_envar OLD_VERSION
  update_envar VERSION
  update_envar DATE true
  echo "All clean. Bye now"
  exit

elif [[ -z "$VERSION" ]]; then
  echo "If you want a specific version number, enter in now."
  echo "Otherwise, leave it blank for whatever the latest version is:"
  read version
  if [ -z "$version" ]; then 
    version=$(get_latest_version)
    vno="latest"
  fi

  echo
  echo "We can download that version for you all good to go."
  echo "If you already have a server on-hand and don't want to re-download, you'll"
  echo "need to move (or copy) your current .jar file to 'minecraft_server.jar',"
  echo "and then run this script again for the server to execute properly."
  echo "Would you like to download the server now (y/n)?"
  while read yn; do
  case $yn in
    y|yes)
      download_server $version
      break
      ;;
    n|no)
      update_server_version $version
      echo "Okay, we'll be waiting for you right here."
      exit
      ;;
    *)
      echo "please enter yes or no (y/n)"
      ;;
  esac
  done
fi

cd $DIR

while [[ $# -gt 0 ]]
do
  if [ -z $2 ]; then
    error "Option $1 missing parameter"
  fi
  old_arg_count=2
  case $1 in
    --help)
      sed -n -e '/###Script Config/,$p'
      exit
      ;;
    -U|--update-path)
      dir=$(get_valid_directory "$2")
      update_envar DIR "$dir"
      DIR="$dir"
      ;;
    -u|--update-server)
      download_server 
      old_arg_count=1
      ;;
    -l|--level|--world)
      update_property level-name "$2"
      ;;
    -R|--resource-pack)
      update_property resource-pack "$2"
      ;;
    -s|--seed|--level-seed)
      update_property level-seed "$2"
      ;;
    -M|--message|--motd)
      update_property motd "$2"
      ;;
    -d|--difficulty)
      difficulty="$2"
      case $difficulty in
        [Pp]eaceful)
          difficulty=0
          ;;
        [Ee]asy)
          difficulty=1
          ;;
        [Nn]ormal)
          difficulty=2
          ;;
        [Hh]ard)
          difficulty=3
          ;;
      esac
      if [[ $difficulty < 0 || $difficulty > 3 ]]; then
        error "Difficulty invalid"
      fi
      update_property difficulty $difficulty
      ;;
    -g|--gamemode)
      gamemode=$2
      case $gamemode in
        [Ss]urvival)
          gamemode=0
          ;;
        [Cc]reative)
          gamemode=1
          ;;
        [Aa]dventure)
          gamemode=2
          ;;
        [Ss]pectator)
          gamemode=3
          ;;
      esac
      if [[ $gamemode < 0 || $gamemode > 3 ]]; then
        error "gamemode invalid"
      fi
      ;;
    -w|--whitelist|--white-list)
      set_bit white-list $2
      ;;
    -r|--rcon|--enable-rcon)
      set_bit enable-rcon $2
      ;;
    -o|--online|--online-mode)
      set_bit online-mode $2
      ;;
    -h|--hardcore-mode|--hardcore)
      set_bit hardcore $2
      ;;
    -p|--pvp)
      set_bit pvp $2
      ;;
    -n|--nether|--allow-nether)
      set_bit allow-nether $2
      ;;
    -f|--flight|--allow-flight)
      set_bit allow-flight $2
      ;;
    -m|--monsters|--spawn-monsters)
      set_bit spawn-monsters $2
      ;;
    -c|--npcs|--spawn-npcs)
      set_bit spawn-npcs $2
      ;;
    -a|--animals|--spawn-animals)
      set_bit spawn-animals $2
      ;;
    -v|--view-distance)
      set_num view-distance $2
      ;;
    -P|--port|--server-port)
      set_num server-port $2
      ;;
    -H|--height|--max-build-height)
      set_num max-build-height $2
      ;;
    *)
      error "Unknown option $1"
      ;;
  esac
  shift $old_arg_count
done

#filter is applied to the stdout of the server
#filter=


#print the date next to any join/leave events
date='/joined the game|left the game/{ printf("%s on ", $0); system("date"); next } 1'
filter="$filter | awk '$date'"

#run server
echo "Running server..."
eval java -Xmx800M -Xms256M -jar "$DIR/minecraft_server.jar" nogui "$filter"
