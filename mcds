#!/bin/bash
#Copyright (C) 2015 Michael Ruigrok - protected under Australian and International Copyright law
#Michael Ruigrok can be found at http://www.github.com/michaelruigrok/
#or at ruigrok.michael@gmail.com
#Licence found within LICENSE
############################################

#envars
README=./README.md
DIR=
VERSION=
OLD_VERSION=

#takes the property $1 and updates it to value $2 in the server properties
update_property () {
  echo "updating field $1"
  sed -i -e "s/^$1=.*/$1=$2/" "$DIR/server.properties"
}

#takes the envar $1 and updates it to value $2 from within this file
update_envar () {
  echo "updating envar '$1'"
  sed -i -e "s|^$1=.*|$1=$2|" "$0"
}

#updates field $1 to be $2 in file $3
update_field () {
  sed -i -e "s|^$1=.*|$1=$2|" "$3"
}

#updates the property $1 to match the binary value $2 in server properties
set_bit () {
  case $2 in
    true|1|on|set|yes)
      update_property $1 true
      ;;
    false|0|off|clear|no)
      update_property $1 false
      ;;
    *)
      echo "Error: Option $1 is not a binary value"
      exit
  esac
}

#updates the property $1 to match the number value $2 in server properties
set_num () {
  regex='^[0-9]+$'
  if [[ $2 =~ $regex ]]; then
    update_property $1 $2
  else
    echo "Error: Option $1 is not a number value"
    exit
  fi
}

check_directory () {
  if [[ ! -d $1 ]]; then
    echo "Error: Invalid directory '$1'"
    exit
  fi
}

#get the link to download the latest minecraft server
get_server_download () {
  link="$(curl https://minecraft.net/en/download/server 2> /dev/null | grep 'Download <a href=')"
  echo "$(echo "$link" | sed 's%.*\(s3.*\.jar\)">.*%\1%')"
}

#retrieve the server version from a server download link
#takes the link as its first and only argument
get_latest_version () {
  echo "$1" | sed 's%.*versions/\([0-9.]*\)/.*%\1%'
}

#apply the given version number as the current number
update_server_version () {
  update_envar OLD_VERSION "$VERSION"
  update_envar VERSION "$1"
  OLD_VERSION="$VERSION"
  VERSION="$1"
}

#downloads the latest server update, if available
#optional first argument specifies a version number other than the latest version
update_server () {
  link=$(get_server_download)
  version=$(get_latest_version $link)

  if [ ! -z $1 ]; then 
    link=$(echo "$link" | sed "s%$version%$1%g")
    version=$1
  fi

  if [ "$version" = "$VERSION" ]; then
    echo "Version is current."
    return 1
  fi

  echo "Downloading new server..."
  if curl "$link" > $DIR/new_server.jar; then 
    #if [ ! -e $DIR/minecraft_server.jar ]; then
    echo "Downloaded new file, now making backup and replacing server jar"
    mv minecraft_server.jar old_server.jar && mv new_server.jar minecraft_server.jar
    update_server_version $version
    return 0
  fi
  return 2
}

echo_help () {
  echo "This is mcds, the simple minecraft server launcher"
}

#main

if [ $1 = --help ]; then
  echo
  sed -n -e '/Options/,$p' $README
  exit

elif [ $1 = --args ]; then
  echo
  echo "The last option name (Not the all-caps argument) corresponds to property name"
  echo "As it is in the server.properties file:"
  echo
  awk "/Script Options/,0{ if (/^#|^\s*-/) {print}}" $README
  exit

elif [[ -z "$DIR" ]]; then
  echo "Please enter the directory the minecraft server lives at:"
  echo "(Leave blank if it's this one)"
  read directory
  check_directory $directory
  [ -z "$directory" ] && directory=.
  DIR=$directory
  update_envar DIR $directory

elif [ $1 = --reset ]; then
  echo
  echo "this will delete any knowledge of data in the server directory, but will"
  echo "create a backup of this script inside of it just in case. Proceed (y/N)?"
  read reset
  [ $reset != 'y' ] && echo "Not resetting. Bye now!" && exit
  cp "$0" $DIR/backup.mcds
  echo "Backup at backup.mcds"
  update_envar DIR
  update_envar OLD_VERSION
  update_envar VERSION
  echo "All clean. Bye now"
  exit


elif [[ -z "$VERSION" ]]; then
  echo "If you want a specific version number, enter in now."
  echo "Otherwise, leave it blank for whatever the latest version is:"
  read version
  if [ -z "$version" ]; then 
    link=$(get_server_download)
    version=$(get_latest_version $link)
    vno="latest"
  fi

  echo
  echo "We can download that version for you all good to go."
  echo "If you already have a server on-hand, you'll need to move (or copy)"
  echo "your current .jar file to 'minecraft_server.jar', and then run"
  echo "this script again for the server to execute properly."
  echo "Would you like to download the server now (y/n)?"
  while read yn; do
  case $yn in
    y|yes)
      update_server $version
      break
      ;;
    n|no)
      update_server_version $version
      echo "Okay, we'll be waiting for you right here."
      exit
      ;;
    *)
      echo "please enter yes or no (y/n)"
      ;;
  esac
  done
fi

while [[ $# -gt 0 ]]
do
  if [[ $2 == -* ]]; then
    echo "Error: Option $1 missing parameter"
    exit
  fi
  old_arg_count=2
  case $1 in
    --help)
      sed -n -e '/###Script Config/,$p'
      exit
      ;;
    -U|--update-path)
      check_directory $2
      update_envar DIR $2
      DIR=$2
      ;;
    -u|--update-server)
      update_server 
      old_arg_count=1
      exit
      ;;
    -l|--level|--world)
      update_property level-name $2
      ;;
    -R|--resource-pack)
      update_property resource-pack $2
      ;;
    -s|--seed|--level-seed)
      update_property level-seed $2
      ;;
    -M|--message|--motd)
      update_property motd $2
      ;;
    -d|--difficulty)
      difficulty=$2
      case $difficulty in
        [Pp]eaceful)
          difficulty=0
          ;;
        [Ee]asy)
          difficulty=1
          ;;
        [Nn]ormal)
          difficulty=2
          ;;
        [Hh]ard)
          difficulty=3
          ;;
      esac
      if [[ $difficulty < 0 || $difficulty > 3 ]]; then
        echo "Error: Difficulty invalid"
        exit
      fi
      update_property difficulty $difficulty
      ;;
    -g|--gamemode)
      gamemode=$2
      case $gamemode in
        [Ss]urvival)
          gamemode=0
          ;;
        [Cc]reative)
          gamemode=1
          ;;
        [Aa]dventure)
          gamemode=2
          ;;
        [Ss]pectator)
          gamemode=3
          ;;
      esac
      if [[ $gamemode < 0 || $gamemode > 3 ]]; then
        echo "Error: gamemode invalid"
        exit
      fi
      ;;
    -w|--whitelist|--white-list)
      set_bit white-list $2
      ;;
    -r|--rcon|--enable-rcon)
      set_bit enable-rcon $2
      ;;
    -o|--online|--online-mode)
      set_bit online-mode $2
      ;;
    -h|--hardcore-mode|--hardcore)
      set_bit hardcore $2
      ;;
    -p|--pvp)
      set_bit pvp $2
      ;;
    -n|--nether|--allow-nether)
      set_bit allow-nether $2
      ;;
    -f|--flight|--allow-flight)
      set_bit allow-flight $2
      ;;
    -m|--monsters|--spawn-monsters)
      set_bit spawn-monsters $2
      ;;
    -c|--npcs|--spawn-npcs)
      set_bit spawn-npcs $2
      ;;
    -a|--animals|--spawn-animals)
      set_bit spawn-animals $2
      ;;
    -v|--view-distance)
      set_num view-distance $2
      ;;
    -P|--port|--server-port)
      set_num server-port $2
      ;;
    -H|--height|--max-build-height)
      set_num max-build-height $2
      ;;
    *)
      echo "Error: Unknown option $1"
      exit
      ;;
  esac
  shift $old_arg_count
done

#run server
echo "Running server..."
java -Xmx1024M -Xms1024M -jar "$DIR/minecraft_server.jar" nogui
